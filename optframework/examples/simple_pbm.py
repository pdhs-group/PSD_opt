# -*- coding: utf-8 -*-
"""
Created on Mon Jan 13 15:13:37 2025

@author: px2030

PBMSolver Basic Usage Example
=============================

This script demonstrates the basic usage of the Population Balance Model (PBM) solver
for simulating particle agglomeration and breakage processes using the method of moments.

The PBM solver uses the method of moments to solve population balance equations, which is
computationally more efficient than discrete methods but provides statistical information
(moments) rather than full particle size distributions.

Key Components:
- PBMSolver: Main solver class that handles moment-based PBE solving
- PBMCore: Core functionality for moment initialization and PBE solving

Usage Flow:
1. Initialize solver with dimension (1D or 2D)
2. Initialize moments using init_moments() 
3. Solve the PBE using solve_PBM()
4. Extract and analyze results (moments, normalized moments)
"""

from optframework import PBMSolver

if __name__ == "__main__":
    dim = 2
    pbm = PBMSolver(dim)
    pbm.core.init_moments(
        NDF_shape="normal",    # Shape of initial distribution
        N0=1e3,               # Total number concentration (1D) or N01 for component 1 (2D)
        x_range=(1e-15, 1e-12),  # Range of particle volumes [m³]
        mean=5e-14,           # Mean volume of initial distribution [m³]
        std_dev=1e-13         # Standard deviation of initial distribution [m³]
    )
    # What happens during init_moments():
    # -----------------------------------
    # For 1D systems:
    #   - Creates normalized distribution function (NDF) based on NDF_shape
    #   - Calculates moments μₖ = ∫ xᵏ × NDF(x) dx for k = 0, 1, ..., 2*n_order-1
    #   - moment[0] = total number concentration
    #   - moment[1] = total volume concentration  
    #   - Higher moments contain size distribution information
    #
    # For 2D systems:
    #   - Creates NDFs for both components
    #   - Calculates 2D moments μₖₗ = ∫∫ x₁ᵏ × x₂ˡ × NDF₁(x₁) × NDF₂(x₂) dx₁dx₂
    #   - Uses moment indices generated by moment_2d_indices_c()
    #   - N01, N02 specify initial concentrations for each component
    
    pbm.core.solve_PBM()

    moments = pbm.moments
    # Normalized moments - dimensionless, useful for comparison
    moments_norm = moments[0,:] / moments[0,0]
    print(f"Simulation completed successfully: {pbm.calc_status}")
    print(f"Initial total number: {moments[0,0]:.2e}")
    print(f"Final total number: {moments[0,-1]:.2e}")
    print(f"Number change ratio: {moments[0,-1]/moments[0,0]:.3f}")
    